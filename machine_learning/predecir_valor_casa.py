# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/10I10IQZ7kwJ06WqRQK_563h8T5yDunq5
"""

import tensorflow as tf
import numpy as np
import matplotlib.pyplot as plt

# Datos de entrenamiento
area = np.array([1400, 1600, 1700, 1875, 1100, 1550, 2350, 2450, 1425, 1700])
precios = np.array([245000, 312000, 279000, 308000, 199000, 219000, 405000, 324000, 319000, 255000])

# Normalización de los datos
area_norm = (area - np.mean(area)) / np.std(area)
precios_norm = (precios - np.mean(precios)) / np.std(precios)

# Crear el modelo de la red neuronal
capa = tf.keras.layers.Dense(units=1, input_shape=[1])
modelo = tf.keras.Sequential([capa])

# Compilar el modelo
modelo.compile(optimizer=tf.keras.optimizers.Adam(0.1), loss='mean_squared_error')
history = modelo.fit(area_norm, precios_norm, epochs=100, verbose=False)

plt.xlabel("# Epoca")
plt.ylabel("Magnitud de pérdida")
plt.plot(history.history["loss"])

# Predecir el precio de una casa de 2000 pies cuadrados
area_test = np.array([2000], dtype=float)
area_test_norm = (area_test - np.mean(area)) / np.std(area)
precio_pred = modelo.predict(area_test_norm)
precio_pred_unnorm = precio_pred * np.std(precios) + np.mean(precios)
print("basicamente el precio seria de : $" + str(precio_pred_unnorm[0]))